//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.10

use super::sea_orm_active_enums::StatusName;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "contents")]
pub struct Model {
    pub created_at: DateTime,
    pub updated_at: DateTime,
    #[sea_orm(primary_key, auto_increment = false)]
    pub player_connection_id: i32,
    #[sea_orm(primary_key, auto_increment = false)]
    pub content_id: String,
    pub parent_id: Option<String>,
    pub cached_data: Option<Json>,
    pub status: Option<StatusName>,
    pub status_last_updated_at: DateTime,
    pub sort_key: i64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::content_downloads::Entity")]
    ContentDownloads,
    #[sea_orm(
        belongs_to = "super::player_connections::Entity",
        from = "Column::PlayerConnectionId",
        to = "super::player_connections::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    PlayerConnections,
}

impl Related<super::content_downloads::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ContentDownloads.def()
    }
}

impl Related<super::player_connections::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PlayerConnections.def()
    }
}
