//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.10

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "player_connections")]
pub struct Model {
    pub created_at: DateTime,
    pub updated_at: DateTime,
    #[sea_orm(primary_key)]
    pub id: i32,
    pub media_provider_id: String,
    pub user_id: i32,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub identity: Option<Json>,
    pub status: Option<Json>,
    pub preferences: Option<Json>,
    pub preferred_profile: Option<String>,
    pub root_libraries: Option<Json>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::contents::Entity")]
    Contents,
    #[sea_orm(has_many = "super::libraries::Entity")]
    Libraries,
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::UserId",
        to = "super::users::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Users,
}

impl Related<super::contents::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Contents.def()
    }
}

impl Related<super::libraries::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Libraries.def()
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl Related<super::content_downloads::Entity> for Entity {
    fn to() -> RelationDef {
        super::contents::Relation::ContentDownloads.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::contents::Relation::PlayerConnections.def().rev())
    }
}
