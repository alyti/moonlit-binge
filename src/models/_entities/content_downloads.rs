//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.10

use super::sea_orm_active_enums::StatusName;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "content_downloads")]
pub struct Model {
    pub created_at: DateTime,
    pub updated_at: DateTime,
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub player_connection_id: i32,
    pub content_id: String,
    pub status_info: Option<Json>,
    pub status: StatusName,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::contents::Entity",
        from = "(Column::PlayerConnectionId, Column::PlayerConnectionId, Column::ContentId, Column::ContentId)",
        to = "(super::contents::Column::ContentId, super::contents::Column::PlayerConnectionId, super::contents::Column::ContentId, super::contents::Column::PlayerConnectionId)",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Contents,
}

impl Related<super::contents::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Contents.def()
    }
}

impl Related<super::player_connections::Entity> for Entity {
    fn to() -> RelationDef {
        super::contents::Relation::PlayerConnections.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::contents::Relation::ContentDownloads.def().rev())
    }
}
